1- The content on Andrew Mead's PDF Node Guide serves as a reference for when following the course to that you don't have to look back into the videos if you missed or want to revisit something.
2- To install node you can use the terminal to install by using the command brew install node@22 if you have home brew installed a package manager, if not you can just use their installer. To check the version use the command node -v.
3- The limitations of js before node was that it could only be run on the browser, with node you can run js as a standalone application with a server instead.
4- Node is a server side runtime engine for js that allows you to add functionality that a browser does not offer. It uses the V8 engine similar to chrome to take in certain objects that belong to it and run them by binding C++ instructions to them
allowing js to communicate with your computer. Compared to chrome node allows you to run js on the server side and allows the use of libraries and packages to create an app that has better functionality
5- REPL stands for read eval print loop. Node uses repl to take in a command and give the user a return. It is run by first entering node into the terminal. Then you can type in commands and get a response.
6- People choose to learn node because it is in high demand for backend and fullstack engineers. Node also allows the use of packages and libraries to further streamline the process when building an app so that you can focus on more unique features.
7- I/O stands for input output. The benefit of a non-blocking I/O model is that it allows processes to run when waiting for other process to complete. Say for an example you are fetching data, but it takes long. You don't want to wait for it
because you can't do other tasks, so non-blocking allows the process to fetch it in the background and when it's ready it can return the expected data after everything else is processed.
8- To run js scripts on node you do in the terminal node and the name of the js file you want to run (node app.js).
9- To import a core node module you can use the syntax const (name of module) = require("name of module");
10- To create your own module you can create a seperate js file for functionality you want to import. At the bottom of that new file you use modules.exports to export functions you want to use. Last you require the file using the file path as the string for the require,
so that you have the module in your main js file.